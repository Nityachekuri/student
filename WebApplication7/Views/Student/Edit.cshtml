
@model WebApplication7.Models.Student

@{
    ViewBag.Title = "Edit";
}
<div class="container">


    <h2>Edit</h2>
    <style>

        #editForm {
            background-color:khaki;
            padding: 20px;
            border-radius: 5px;
            box-shadow: initial;
            margin: 20px auto;
            max-width: 500px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .control-label {
            font-weight: bold;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid double;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 16px;
        }

        .actionButton {
            background-color: darkgreen;
            color: white;
            padding: 9px 13px;
            border: double;
            border-radius: 3px;
            cursor: pointer;
            width: 50%;
        }

            .actionButton:hover {
                background-color: Highlight;
            }

        .invalid-feedback {
            color: brown;
            display: none;
            margin-top: 5px;
        }
    </style>
    <form id="editForm" class="form-horizontal">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()


            <div class="form-horizontal">
                <h4>Student</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.StudentID)

                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger", id = "FirstName" })
                        <div class="invalid-feedback"></div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger", id = "LastName" })
                        <div class="invalid-feedback"></div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @* Convert DateTime to string in yyyy-MM-dd format *@
                        @{ var formattedDateOfBirth = Model.DateOfBirth.ToString("yyyy-MM-dd"); }
                        <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth" value="@formattedDateOfBirth" required>
                        @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger", id = "DateOfBirth" })
                        <div class="invalid-feedback"></div>
                    </div>
                </div>


                @*<div class="form-group">
                        @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth" value="@Model.DateOfBirth" required>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>*@

                <div class="form-group" id="genderField">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Male", new { @required = "required" }) Male
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Female") Female
                        </label>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger", id = "Gender" })
                        <div class="invalid-feedback"></div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger", id = "Address" })
                        <div class="invalid-feedback"></div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger", id = "Email" })
                        <div class="invalid-feedback"></div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger", id = "Phone" })
                        <div class="invalid-feedback"></div>
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" id="btnSave" />
                    </div>
                </div>
            </div>

        }
    </form>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {

            $('input[required]').on('input', function () {
                validateField('#' + $(this).attr('id'));
            });

            $('#Email, #Phone').on('blur', function () {
                var fieldId = '#' + $(this).attr('id');
                validateField(fieldId);
            });

            $('#btnSave').click(function (e) {
                e.preventDefault();

                var isValid = true;
                $('input[required]').each(function () {
                    isValid = validateField('#' + $(this).attr('id')) && isValid;
                });

                if (!isValid) {
                    return;
                }

                var formData = $('form').serialize();

                $.ajax({
                    url: '@Url.Action("Edit", "Student")',
                    type: 'POST',
                    data: formData,
                    success: function (result) {
                        alert('Student details updated successfully!');
                        window.location.href = '@Url.Action("Index", "Student")';
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred while updating student details.');
                    }
                });
            });

            function validateField(fieldId) {
                var fieldValue = $(fieldId).val();


                if (!fieldValue) {
                    showValidationError(fieldId, 'This field is required.');
                    return false;
                }


                if (fieldId === '#Email' && !validateEmail(fieldValue)) {
                    showValidationError(fieldId, 'Please enter a valid email address.');
                    return false;
                }


                if (fieldId === '#Phone' && !validatePhone(fieldValue)) {
                    showValidationError(fieldId, 'Please enter a valid phone number (10 digits).');
                    return false;
                }

                clearValidationError(fieldId);
                return true;
            }

            function showValidationError(fieldId, message) {
                $(fieldId).siblings('.invalid-feedback').text(message).show();
            }

            function clearValidationError(fieldId) {
                $(fieldId).siblings('.invalid-feedback').hide();
            }

            function validateEmail(email) {
                var emailPattern = /^[^\s]+[^\s]+\.[^\s]+$/;
                return emailPattern.test(email);
            }

            function validatePhone(phone) {
                var phonePattern = /^\d{10}$/;
                return phonePattern.test(phone);
            }

        });
    </script>
}
